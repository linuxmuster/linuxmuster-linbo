#!/bin/bash
# postinst script for linuxmuster
# $Id$
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

# Source debconf library.
#. /usr/share/debconf/confmodule

#db_version 2.0


LINBODIR=/var/linbo
DISTCONF=/usr/share/linuxmuster/config/dist.conf

case "$1" in

 configure)

 # repair link to examples
 [ ! -L "$LINBODIR/examples" -a -e "$LINBODIR/examples" ] && rm -rf $LINBODIR/examples
 [ -e "$LINBODIR/examples" ] || ln -s /usr/share/doc/linuxmuster-linbo/examples $LINBODIR/examples

 # init script
 update-rc.d linbo-multicast defaults
 update-rc.d linbo-bittorrent defaults

 # linuxmuster related stuff
 if [ -e "$DISTCONF" ]; then
  . $DISTCONF
  . $HELPERFUNCTIONS
  [ -e "$INSTALLED" ] || exit 0
  [ "$imaging" = "linbo" ] || exit 0
  LINBOLOGDIR="$LOGDIR/linbo"
 else
  exit 0
 fi

 # check serverip in default pxelinux.cfg and start.conf
 for i in $LINBODEFAULTCONF $LINBODIR/start.conf; do
  if ! grep ^Server $i | grep -q "$serverip"; then
   echo "Adjusting server ip in $i to $serverip ..."
   cp $i $i.dpkg-old
   sed -e "s/^Server = \([0-9]\{1,3\}[.]\)\{3\}[0-9]\{1,3\}/Server = $serverip/" -i $i
  fi
 done
 if grep -q "server=" $PXELINUXCFG; then
  if ! grep -q "$serverip" $PXELINUXCFG; then
   echo "Adjusting server ip in $PXELINUXCFG to $serverip ..."
   cp $PXELINUXCFG $PXELINUXCFG.dpkg-old
   sed -e "s/server=\([0-9]\{1,3\}[.]\)\{3\}[0-9]\{1,3\}/server=$serverip/g" -i $PXELINUXCFG
  fi
 fi

 # updating start.confs
 if ls $LINBODIR/start.conf.* &> /dev/null; then
  mkdir -p $LINBODIR/backup
  for i in $LINBODIR/start.conf.*; do
   ext="$(echo $i | grep -o '\.[^.]*$')"
   [ "$ext" = ".gz" ] && continue
   backed_up=""
   echo -n "Checking ${i/$LINBODIR\/}: "
   # RemoteSyncEnabled -> NewEnabled
   if grep -qi ^remotesyncenabled $i; then
    cp $i $LINBODIR/backup
    backed_up=yes
    echo -n "RemoteSyncEnabled -> NewEnabled ... "
    sed -e 's/[Rr][Ee][Mm][Oo][Tt][Ee][Ss][Yy][Nn][Cc][Ee][Nn][Aa][Bb][Ll][Ee][Dd]/NewEnabled/g' -i $i
   fi
   # pxegrub -> grub.exe
   if grep -qi pxegrub $i; then
    if [ -z "$backed_up" ]; then
     cp $i $LINBODIR/backup
     backed_up=yes
    fi
    echo -n "pxegrub -> grub.exe ... "
    sed -e 's/[Pp][Xx][Ee][Gg][Rr][Uu][Bb]/grub.exe/g' -i $i
   fi
   # UseMultiCast -> DownloadType (#403)
   if grep -qi ^usemulticast $i; then
    if [ -z "$backed_up" ]; then
     cp $i $LINBODIR/backup
     backed_up=yes
    fi
    RET=`grep -i ^usemulticast $i | tail -1 | awk -F= '{ print $2 }' | awk '{ print $1 }' | tr A-Z a-z`
    echo -n "UseMultiCast -> DownloadType ... "
    if [ "$RET" = "yes" ]; then
     rstr="multicast"
    else
     rstr="rsync"
    fi
    sed -e "s|^[Uu][Ss][Ee][Mm][Uu][Ll][Tt][Ii][Cc][Aa][Ss][Tt].*|DownloadType = $rstr # Image-Download per torrent\|multicast\|rsync\, default ist rsync|" -i $i
   fi
   # adding DownloadType
   if ! grep -qi ^downloadtype $i; then
    if [ -z "$backed_up" ]; then
     cp $i $LINBODIR/backup
     backed_up=yes
    fi
    echo -n "Adding DownloadType ... "
    sed -e "/^\[[Ll][Ii][Nn][Bb][Oo]\]/a\
DownloadType = rsync # Image-Download per torrent\|multicast\|rsync\, default ist rsync" -i $i
   fi
   echo "Ok!"
   [ -n "$backed_up" ] && backup_flag=yes
  done
  [ -n "$backup_flag" ] && echo "Changed files were backed up to $LINBODIR/backup!"
 fi # updating start.confs

 # check for linbo mail wrapper in /etc/aliases
 if ! grep -q ^linbo: /etc/aliases; then
  cp /etc/aliases /etc/aliases.dpkg-old
  sed -e "/^root:/a\
linbo: \"\|\/usr\/share\/linuxmuster-linbo\/mail2log.sh\"" -i /etc/aliases
  newaliases
 fi

 # add bittorrent user if not present
 if ! id bittorrent &> /dev/null; then
  useradd -c "BitTorrent User" -d /var/lib/bittorrent -g nogroup -r bittorrent
  dpkg-statoverride --add bittorrent nogroup 755 /var/lib/bittorrent
  dpkg-statoverride --add bittorrent nogroup 755 /var/log/bittorrent
 fi
 chown bittorrent:nogroup /var/lib/bittorrent -R
 chown bittorrent:nogroup /var/log/bittorrent -R

 # provide a bittorrent default file if necessary
 if [ ! -s /etc/default/bittorrent -a -s /usr/share/doc/bittorrent/examples/bittorrent.default ]; then
  cp /usr/share/doc/bittorrent/examples/bittorrent.default /etc/default/bittorrent
 fi

 # provide a bittorrent init script if necessary
 if [ ! -s /etc/init.d/bittorrent -a -s /usr/share/doc/bittorrent/examples/bittorrent.init ]; then
  cp /usr/share/doc/bittorrent/examples/bittorrent.init /etc/init.d/bittorrent
  chmod 755 /etc/init.d/bittorrent
  update-rc.d bittorrent defaults
 fi

 # setting needed options in /etc/default/bittorrent
 if [ -s /etc/default/bittorrent ]; then
  if ! grep -q ^REANNOUNCE_INTERVAL /etc/default/bittorrent; then
   echo "Adding REANNOUNCE_INTERVAL=15 to /etc/default/bittorrent."
   cp /etc/default/bittorrent /etc/default/bittorrent.dpkg-old && bt_backup=yes
   echo >> /etc/default/bittorrent
   echo "# seconds downloaders should wait between reannouncements (default 1800)" >> /etc/default/bittorrent
   echo "# 15 seconds is recommended value for linuxmuster-linbo" >> /etc/default/bittorrent
   echo "REANNOUNCE_INTERVAL=15" >> /etc/default/bittorrent
  fi
  if ! grep -q ^"DAEMONUSER=bittorrent" /etc/default/bittorrent; then
   echo "Adding DAEMONUSER=bittorrent to /etc/default/bittorrent."
   [ -z "$bt_backup" ] && cp /etc/default/bittorrent /etc/default/bittorrent.dpkg-old && bt_backup=yes
   sed -e 's|^DAEMONUSER=|#DAEMONUSER=|' -i /etc/default/bittorrent
   echo >> /etc/default/bittorrent
   echo "# it is recommended for linuxmuster-linbo to run the service as bittorrent user" >> /etc/default/bittorrent
   echo "DAEMONUSER=bittorrent" >> /etc/default/bittorrent
  fi
  if ! grep -q ^"ALLOWED_DIR=$LINBODIR" /etc/default/bittorrent; then
   echo "Adding ALLOWED_DIR=$LINBODIR to /etc/default/bittorrent."
   [ -z "$bt_backup" ] && cp /etc/default/bittorrent /etc/default/bittorrent.dpkg-old && bt_backup=yes
   sed -e 's|^ALLOWED_DIR=|#ALLOWED_DIR=|' -i /etc/default/bittorrent
   echo >> /etc/default/bittorrent
   echo "# where the LINBO images live" >> /etc/default/bittorrent
   echo "ALLOWED_DIR=$LINBODIR" >> /etc/default/bittorrent
  fi
  if ! grep -q ^"PORT=6969" /etc/default/bittorrent; then
   echo "Adding PORT=6969 to /etc/default/bittorrent."
   [ -z "$bt_backup" ] && cp /etc/default/bittorrent /etc/default/bittorrent.dpkg-old
   sed -e 's|^PORT=|#PORT=|' -i /etc/default/bittorrent
   echo >> /etc/default/bittorrent
   echo "# port must be 6969 for linuxmuster-linbo" >> /etc/default/bittorrent
   echo "PORT=6969" >> /etc/default/bittorrent
  fi
  # provide a logrotate file for bittorrent
  if [ ! -e /etc/logrotate.d/bittorrent ]; then
   echo "Creating /etc/logrotate.d/bittorrent."
   sed -e 's|/var/log/linuxmuster/linbo/|/var/log/bittorrent/|' /etc/logrotate.d/linuxmuster-linbo > /etc/logrotate.d/bittorrent
  fi
 fi # /etc/default/bittorrent

 # change owner of logdir to nobody
 [ -d "$LINBOLOGDIR" ] || mkdir -p $LINBOLOGDIR
 chown nobody $LINBOLOGDIR -R

 # create dropbear ssh keys
 if [ ! -s "$SYSCONFDIR/linbo/ssh_host_rsa_key" ]; then
  ssh-keygen -t rsa -N "" -f $SYSCONFDIR/linbo/ssh_host_rsa_key
  /usr/lib/dropbear/dropbearconvert openssh dropbear $SYSCONFDIR/linbo/ssh_host_rsa_key $SYSCONFDIR/linbo/dropbear_rsa_host_key
 fi
 if [ ! -s "$SYSCONFDIR/linbo/ssh_host_dsa_key" ]; then
  ssh-keygen -t dsa -N "" -f $SYSCONFDIR/linbo/ssh_host_dsa_key
  /usr/lib/dropbear/dropbearconvert openssh dropbear $SYSCONFDIR/linbo/ssh_host_dsa_key $SYSCONFDIR/linbo/dropbear_dss_host_key
 fi

 # kill obsolete btdownloadheadless processes from old versions
 if ps ax | grep -v grep | grep -q btdownloadheadless; then
  /etc/init.d/linbo-bittorrent stop
  oldpids="$(ps ax | grep -v grep | grep btdownloadheadless | awk '{ print $1 }')"
  echo "Sending obsolete btdownloadheadless processes the TERM signal."
  kill $oldpids
  /etc/init.d/linbo-bittorrent start
 fi

 # update linbofs.gz
 $LINBOUPDATE
 ;;

 abort-upgrade|abort-remove|abort-deconfigure)

 ;;

 *)
	 echo "postinst called with unknown argument \`$1'" >&2
	 exit 1
 ;;

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

#db_stop

exit 0

